- job:
    name: pushes_monitoring
    project-type: pipeline
    description: 'View: push_tests. This job checks "branches_list" file and executes run_test_snapshot in case of first match.'
    node: !include: './maxscale_jobs/include/slave_for_push_monitoring.yaml'
    parameters:
      - !include: './maxscale_jobs/include/on_push_maxscale_branches_file.yaml'
    scm:
      - git:
          url: !include: './maxscale_jobs/include/maxscale_repo.yaml'
          branches:
            - origin/*
    triggers:
      - pollscm:
          cron: "@hourly"
          ignore-post-commit-hooks: True
    dsl: |
      pipeline {
        agent any          
        stages {
          stage('Check branch') {
            steps {
              sh '$HOME/maxscale-jenkins-jobs/check_branch_matches_pattern.sh'
            }
          }
          stage('build') {
            parallel {
              stage {
                when {
                  expression {  fileExists 'branch_match' }
                }
                steps('build CentOS') {
                  script {
                    def myparams = currentBuild.rawBuild.getAction(ParametersAction).getParameters()
                    load "$WORKSPACE/env_vars_$BUILD_ID"
                    myparams = myparams + [string(name: 'box', value: 'ubuntu_xenial_aws')]
                    myparams = myparams + [string(name: 'try_already_running', value: 'yes')]
                    myparams = myparams + [string(name: 'source', value: "${branch_to_check}")]
                    myparams = myparams + [string(name: 'test_set', value: "${test_set}")]
                    myparams = myparams + [string(name: 'target', value: "${branch_to_check}_${BUILD_ID}")]
                    build job: 'build', parameters: myparams, block: true
                  }
                }
              }
              stage('build Ubuntu') {
                when {
                  expression {  fileExists 'branch_match' }
                }
                steps {
                  script {
                    def myparams = currentBuild.rawBuild.getAction(ParametersAction).getParameters()
                    load "$WORKSPACE/env_vars_$BUILD_ID"
                    myparams = myparams + [string(name: 'box', value: 'centos_7_libvirt')]
                    myparams = myparams + [string(name: 'try_already_running', value: 'yes')]
                    myparams = myparams + [string(name: 'source', value: "${branch_to_check}")]
                    myparams = myparams + [string(name: 'test_set', value: "${test_set}")]
                    myparams = myparams + [string(name: 'target', value: "${branch_to_check}_${BUILD_ID}")]
                    build job: 'build', parameters: myparams, block: true
                  }
                }
              }
            }
          }
          stage('run test') {
            when {
                expression {  fileExists 'branch_match' }
            }
            parallel {
              stage('run functional tests') {
                when {
                  expression {  fileExists 'branch_match' }
                }
                steps {
                  script {
                    def myparams = currentBuild.rawBuild.getAction(ParametersAction).getParameters()
                    load "$WORKSPACE/env_vars_$BUILD_ID"
                    myparams = myparams + [string(name: 'source', value: "${branch_to_check}")]
                    myparams = myparams + [string(name: 'test_set', value: "${test_set}")]
                    myparams = myparams + [string(name: 'target', value: "${branch_to_check}_${BUILD_ID}")]
                    build job: 'run_test_snapshot', parameters: myparams, block: true
                  }
                }
              }
              stage('run performance tests') {
                when {
                  expression {  fileExists 'branch_match' }
                }
                steps {
                  script {
                    def myparams = currentBuild.rawBuild.getAction(ParametersAction).getParameters()
                    load "$WORKSPACE/env_vars_$BUILD_ID"
                    myparams = myparams + [string(name: 'source', value: "${branch_to_check}")]
                    myparams = myparams + [string(name: 'test_set', value: "${test_set}")]
                    myparams = myparams + [string(name: 'target', value: "${branch_to_check}_${BUILD_ID}")]
                    build job: 'performace_test_demo', parameters: myparams, block: true
                  }
                }
              }
            }
          }
        }   
      }
    wrappers:
      - !include: './maxscale_jobs/include/workspace-cleanup-total.yaml'
